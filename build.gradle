apply plugin: 'groovy'
apply plugin: 'scala'
//apply plugin: 'jruby'
apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    compile    'org.codehaus.groovy:groovy-all:2.1.5'

    compile    'org.scala-lang:scala-compiler:2.9.2'

    compile    'org.scala-lang:scala-library:2.9.2'

    compile    'commons-io:commons-io:2.4'

    compile    'commons-lang:commons-lang:2.6'

    compile    'commons-configuration:commons-configuration:1.10'

    compile    'org.tmatesoft.svnkit:svnkit:1.3.3'

    compile    'org.antlr:antlr-runtime:3.4'

    //compile    'org.jruby:gradle-jruby-plugin:0.1'

    //compile 'org.clojure:clojure:1.2.0'

    //compile 'com.jellyfish85:dbaccessor:1.0-SNAPSHOT'
    compile files('lib/dbaccessor.jar')

    //compile 'com.jellyfish85:svnaccessor:1.0-SNAPSHOT'
    compile files('lib/svnaccessor.jar')

    compile files('lib/plsql-1.0.0.jar')

    //runtime files('lib/classes12.jar')

    runtime files('lib/ojdbc14.jar')

    testCompile      'junit:junit:4.11'

    testCompile      group: "org.specs2", name: "specs2_2.9.2", version:"1.12.1"

    testCompile      group: 'org.specs2', name: 'specs2-scalaz-core_2.9.1',version:'6.0.1'

}


mainClassName = "com.jellyfish85.srcParser.facade.SrcParserFacade"
run {
    // dynamic arguments (from "-Prunargs=..." on gradle command line)
    if (project.hasProperty('runargs')) {
        args project.runargs.split(',')
    }
}

/*
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies{
        classpath 'org.jruby:gradle-jruby-plugin:0.1'
    }
}
apply plugin: 'jruby'
*/

task ConfigActionRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.ConfigActionRunner"
    args = project.runargs.split(',').toList()
}

task ParsePageActions (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.PageActionsRunner"
    args = project.runargs.split(',').toList()
}

task SqlCdataRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.SqlCdataRunner"
    args = project.runargs.split(',').toList()
}

task SqlCdataExpRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.SqlCdataExpRunner"
    args = project.runargs.split(',').toList()
}

task CleanSqlTextRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.CleanSqlTextRunner"
    args = project.runargs.split(',').toList()
}

task CleanSqlTextExpRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.CleanSqlTextExpRunner"
    args = project.runargs.split(',').toList()
}

task BlSubjectIdRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.BlSubjectIdRunner"
    args = project.runargs.split(',').toList()
}

task XqlSubjectIdRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.XqlSubjectIdRunner"
    args = project.runargs.split(',').toList()
}

task DtdXmlDownloadRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.DtdXmlDownloadRunner"
    args = project.runargs.split(',').toList()
}

task BPPGRunner (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.jellyfish85.srcParser.runner.BPPGRunner"
    args = project.runargs.split(',').toList()
}